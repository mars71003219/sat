#!/usr/bin/env python3
"""
인공위성 텔레메트리 데이터 시뮬레이터
실제 위성 데이터 송수신 특성을 모사하여 6가지 주요 서브시스템의 텔레메트리를 생성합니다.

Docker 실행:
  docker run -d --rm \
    --name satellite-simulator \
    --network satellite_webnet \
    -v /mnt/c/projects/satellite/tests:/tests \
    -w /tests \
    python:3.10-slim \
    bash -c "pip install -q confluent-kafka && python satellite_simulator.py --kafka kafka:9092"

CLI 예시:
  python satellite_simulator.py --kafka localhost:9092 --satellites 10 --interval 5 --duration 5400
"""

import json
import math
import random
import time
import argparse
from datetime import datetime, timezone
from typing import Dict, Any, List
from confluent_kafka import Producer
from dataclasses import dataclass, asdict
from enum import Enum


class SatelliteMode(Enum):
    """위성 운용 모드"""
    SAFE = "safe"  # 안전 모드 (최소 기능)
    NOMINAL = "nominal"  # 정상 운용
    PAYLOAD_ACTIVE = "payload_active"  # 탑재체 작동 중
    MANEUVER = "maneuver"  # 궤도 조정 중
    ECLIPSE = "eclipse"  # 식(Eclipse) 구간


@dataclass
class BeaconData:
    """🛰️ 비콘 (Beacon) - 위성 생존 신호"""
    alive: bool = True
    uptime_seconds: int = 0
    mode: str = SatelliteMode.NOMINAL.value
    last_command_time: str = None


@dataclass
class OBCStatus:
    """🖥️ 온보드 컴퓨터 (On-Board Computer)"""
    cpu_usage_percent: float = 0.0
    memory_usage_percent: float = 0.0
    uptime_seconds: int = 0
    error_count: int = 0
    boot_count: int = 1
    onboard_time: str = None


@dataclass
class EPSStatus:
    """⚡ 전력 시스템 (Electrical Power System)"""
    # 배터리
    battery_soc_percent: float = 0.0  # State of Charge
    battery_voltage: float = 0.0
    battery_current: float = 0.0
    battery_temperature: float = 0.0

    # 태양 전지판 (각 패널별)
    solar_panel_1_voltage: float = 0.0
    solar_panel_1_current: float = 0.0
    solar_panel_2_voltage: float = 0.0
    solar_panel_2_current: float = 0.0
    solar_panel_3_voltage: float = 0.0
    solar_panel_3_current: float = 0.0

    # 전력 분배
    obc_power_watts: float = 0.0
    comm_power_watts: float = 0.0
    payload_power_watts: float = 0.0
    total_power_consumption: float = 0.0
    total_power_generation: float = 0.0


@dataclass
class ThermalStatus:
    """🔥 온도 관리 시스템 (Thermal Control System)"""
    battery_temp: float = 0.0
    obc_temp: float = 0.0
    comm_temp: float = 0.0
    payload_temp: float = 0.0
    solar_panel_temp: float = 0.0
    external_temp: float = 0.0

    heater_1_on: bool = False
    heater_2_on: bool = False
    cooler_active: bool = False


@dataclass
class AOCSStatus:
    """🧭 자세 및 궤도 제어 (Attitude & Orbit Control System)"""
    # 자세 센서
    gyro_x: float = 0.0  # 각속도 (deg/s)
    gyro_y: float = 0.0
    gyro_z: float = 0.0

    sun_sensor_angle: float = 0.0  # 태양 각도
    magnetometer_x: float = 0.0  # 자기장 (μT)
    magnetometer_y: float = 0.0
    magnetometer_z: float = 0.0

    # 자세 제어 장치
    reaction_wheel_1_rpm: float = 0.0
    reaction_wheel_2_rpm: float = 0.0
    reaction_wheel_3_rpm: float = 0.0

    # 추진체
    thruster_fuel_percent: float = 100.0
    thruster_pressure_bar: float = 0.0
    thruster_temperature: float = 0.0
    thruster_active: bool = False

    # 궤도 정보 (GPS)
    gps_latitude: float = 0.0
    gps_longitude: float = 0.0
    gps_altitude_km: float = 0.0
    gps_velocity_kmps: float = 0.0


@dataclass
class CommStatus:
    """📡 통신 시스템 (Communication System)"""
    rssi_dbm: float = 0.0  # 신호 강도
    tx_active: bool = False  # 송신 중
    rx_active: bool = False  # 수신 중
    data_backlog_mb: float = 0.0  # 미전송 데이터
    last_contact_seconds_ago: int = 0


@dataclass
class PayloadStatus:
    """🔬 탑재체 (Payload)"""
    camera_on: bool = False
    sensor_on: bool = False
    payload_temp: float = 0.0
    payload_power_watts: float = 0.0
    last_image_time: str = None
    images_captured_count: int = 0


class RealisticSatelliteSimulator:
    """
    실제 위성 텔레메트리 시뮬레이터

    6가지 주요 서브시스템을 시뮬레이션:
    1. 비콘 & OBC (Health & Status)
    2. 전력 시스템 (EPS)
    3. 온도 관리 (TCS)
    4. 자세/궤도 제어 (AOCS)
    5. 통신 시스템 (Comm)
    6. 탑재체 (Payload)
    """

    def __init__(self, satellite_id: str, kafka_servers: str):
        self.satellite_id = satellite_id
        self.kafka_topic = 'satellite-telemetry'

        # Kafka Producer
        self.producer = Producer({
            'bootstrap.servers': kafka_servers,
            'client.id': f'sat-sim-{satellite_id}'
        })

        # 시뮬레이션 상태
        self.time_elapsed = 0  # 초
        self.orbit_period = 5400  # 90분 (LEO 궤도)
        self.orbital_position = random.uniform(0, 360)  # 궤도상 위치 (도)

        # 위성 모드
        self.mode = SatelliteMode.NOMINAL

        # 서브시스템 상태
        self.beacon = BeaconData()
        self.obc = OBCStatus()
        self.eps = EPSStatus()
        self.thermal = ThermalStatus()
        self.aocs = AOCSStatus()
        self.comm = CommStatus()
        self.payload = PayloadStatus()

        # 이벤트 상태
        self.in_eclipse = False  # 지구 그림자
        self.maneuver_active = False
        self.maneuver_end_time = 0
        self.last_maneuver_time = -10000

        print(f"[{satellite_id}] Satellite Simulator initialized")

    def _is_in_eclipse(self) -> bool:
        """지구 그림자(Eclipse) 구간 판정"""
        # 궤도의 약 30% 구간이 그림자 (108도)
        return 252 < (self.orbital_position % 360) < 360

    def _get_sun_angle(self) -> float:
        """태양 각도 계산 (0~180도)"""
        if self.in_eclipse:
            return 180.0
        orbit_phase = (self.time_elapsed % self.orbit_period) / self.orbit_period
        return abs(180 * math.cos(2 * math.pi * orbit_phase))

    def update_beacon_obc(self):
        """비콘 및 OBC 상태 업데이트"""
        self.beacon.alive = True
        self.beacon.uptime_seconds = self.time_elapsed
        self.beacon.mode = self.mode.value
        self.beacon.last_command_time = datetime.now(timezone.utc).isoformat()

        # OBC CPU/메모리 사용률
        base_cpu = 30.0
        if self.mode == SatelliteMode.PAYLOAD_ACTIVE:
            base_cpu = 70.0
        elif self.mode == SatelliteMode.MANEUVER:
            base_cpu = 50.0

        self.obc.cpu_usage_percent = round(base_cpu + random.gauss(0, 5), 2)
        self.obc.memory_usage_percent = round(45 + random.gauss(0, 10), 2)
        self.obc.uptime_seconds = self.time_elapsed
        self.obc.onboard_time = datetime.now(timezone.utc).isoformat()

        # 간헐적 에러 발생 (1% 확률)
        if random.random() < 0.01:
            self.obc.error_count += 1

    def update_eps(self):
        """전력 시스템 업데이트"""
        # 배터리 충/방전
        if self.in_eclipse:
            # 방전 중
            discharge_rate = 0.5  # %/분
            self.eps.battery_soc_percent = max(20, self.eps.battery_soc_percent - discharge_rate * 0.1)
            self.eps.battery_current = random.uniform(-2.5, -1.8)  # 방전 전류
        else:
            # 충전 중
            charge_rate = 0.8
            self.eps.battery_soc_percent = min(100, self.eps.battery_soc_percent + charge_rate * 0.1)
            self.eps.battery_current = random.uniform(1.5, 2.8)  # 충전 전류

        # 배터리 전압 (리튬이온 3.0V~4.2V)
        self.eps.battery_voltage = 3.0 + (self.eps.battery_soc_percent / 100) * 1.2
        self.eps.battery_voltage += random.gauss(0, 0.05)

        # 배터리 온도
        self.eps.battery_temperature = 15 + random.gauss(0, 5)
        if self.eps.battery_current > 2.0:  # 급속 충전 시 온도 상승
            self.eps.battery_temperature += 5

        # 태양 전지판 출력
        if self.in_eclipse:
            # 그림자: 출력 없음
            self.eps.solar_panel_1_voltage = 0.0
            self.eps.solar_panel_1_current = 0.0
            self.eps.solar_panel_2_voltage = 0.0
            self.eps.solar_panel_2_current = 0.0
            self.eps.solar_panel_3_voltage = 0.0
            self.eps.solar_panel_3_current = 0.0
        else:
            # 태양광: 각도에 따른 출력
            sun_angle = self._get_sun_angle()
            efficiency = max(0, math.cos(math.radians(sun_angle)))

            base_voltage = 8.0
            base_current = 2.5

            for i in range(1, 4):
                # 패널마다 약간의 차이
                panel_efficiency = efficiency * random.uniform(0.9, 1.0)
                setattr(self.eps, f'solar_panel_{i}_voltage', round(base_voltage * panel_efficiency, 2))
                setattr(self.eps, f'solar_panel_{i}_current', round(base_current * panel_efficiency, 2))

        # 전력 소비
        self.eps.obc_power_watts = 12 + random.gauss(0, 2)
        self.eps.comm_power_watts = 8 if self.comm.tx_active else 3
        self.eps.payload_power_watts = 25 if self.payload.camera_on else 0

        if self.maneuver_active:
            self.eps.obc_power_watts += 15  # 추진 시스템 전력

        self.eps.total_power_consumption = (
            self.eps.obc_power_watts +
            self.eps.comm_power_watts +
            self.eps.payload_power_watts
        )

        self.eps.total_power_generation = (
            self.eps.solar_panel_1_voltage * self.eps.solar_panel_1_current +
            self.eps.solar_panel_2_voltage * self.eps.solar_panel_2_current +
            self.eps.solar_panel_3_voltage * self.eps.solar_panel_3_current
        )

        # 반올림
        self.eps.battery_soc_percent = round(self.eps.battery_soc_percent, 2)
        self.eps.battery_voltage = round(self.eps.battery_voltage, 2)
        self.eps.battery_current = round(self.eps.battery_current, 2)
        self.eps.total_power_consumption = round(self.eps.total_power_consumption, 2)
        self.eps.total_power_generation = round(self.eps.total_power_generation, 2)

    def update_thermal(self):
        """온도 관리 시스템 업데이트"""
        # 기본 온도 (우주 배경 복사)
        base_temp = -20 if self.in_eclipse else 20

        # 각 부품 온도
        self.thermal.battery_temp = self.eps.battery_temperature
        self.thermal.obc_temp = base_temp + 30 + random.gauss(0, 5)  # CPU 발열
        self.thermal.comm_temp = base_temp + 15 + random.gauss(0, 3)
        self.thermal.payload_temp = base_temp + (20 if self.payload.camera_on else 5)
        self.thermal.solar_panel_temp = base_temp + random.gauss(0, 10)
        self.thermal.external_temp = base_temp + random.gauss(0, 15)

        # 히터 제어 (온도가 낮으면 작동)
        self.thermal.heater_1_on = self.thermal.battery_temp < 0
        self.thermal.heater_2_on = self.thermal.obc_temp < -10

        # 쿨러 제어 (온도가 높으면 작동)
        self.thermal.cooler_active = self.thermal.obc_temp > 60

        # 반올림
        for attr in ['battery_temp', 'obc_temp', 'comm_temp', 'payload_temp', 'solar_panel_temp', 'external_temp']:
            setattr(self.thermal, attr, round(getattr(self.thermal, attr), 2))

    def update_aocs(self):
        """자세 및 궤도 제어 업데이트"""
        # 자이로스코프 (각속도)
        if self.maneuver_active:
            self.aocs.gyro_x = random.gauss(5, 1)
            self.aocs.gyro_y = random.gauss(3, 0.5)
            self.aocs.gyro_z = random.gauss(2, 0.5)
        else:
            self.aocs.gyro_x = random.gauss(0, 0.1)
            self.aocs.gyro_y = random.gauss(0, 0.1)
            self.aocs.gyro_z = random.gauss(0, 0.1)

        # 태양 센서
        self.aocs.sun_sensor_angle = self._get_sun_angle()

        # 자기장 센서 (지구 자기장 30~60μT)
        orbit_phase = (self.time_elapsed % self.orbit_period) / self.orbit_period
        self.aocs.magnetometer_x = 40 * math.sin(2 * math.pi * orbit_phase) + random.gauss(0, 2)
        self.aocs.magnetometer_y = 35 * math.cos(2 * math.pi * orbit_phase) + random.gauss(0, 2)
        self.aocs.magnetometer_z = 50 + random.gauss(0, 5)

        # 리액션 휠 (회전 속도)
        base_rpm = 3000
        self.aocs.reaction_wheel_1_rpm = base_rpm + random.gauss(0, 100)
        self.aocs.reaction_wheel_2_rpm = base_rpm + random.gauss(0, 100)
        self.aocs.reaction_wheel_3_rpm = base_rpm + random.gauss(0, 100)

        # 추진체 (Thruster)
        if not self.maneuver_active and self.time_elapsed - self.last_maneuver_time > 1800:
            # 30분마다 0.5% 확률로 궤도 조정
            if random.random() < 0.005:
                self.maneuver_active = True
                self.maneuver_end_time = self.time_elapsed + random.uniform(30, 90)
                self.last_maneuver_time = self.time_elapsed
                self.mode = SatelliteMode.MANEUVER
                print(f"  [{self.satellite_id}] Orbital maneuver started!")

        if self.maneuver_active:
            if self.time_elapsed < self.maneuver_end_time:
                self.aocs.thruster_active = True
                self.aocs.thruster_pressure_bar = 200 + random.gauss(0, 10)
                self.aocs.thruster_temperature = 600 + random.gauss(0, 50)
                self.aocs.thruster_fuel_percent -= 0.01  # 연료 소모
            else:
                self.maneuver_active = False
                self.aocs.thruster_active = False
                self.mode = SatelliteMode.NOMINAL
                print(f"  [{self.satellite_id}] Orbital maneuver completed")
        else:
            self.aocs.thruster_active = False
            self.aocs.thruster_pressure_bar = 0
            self.aocs.thruster_temperature = 20 + random.gauss(0, 5)

        # GPS 궤도 정보
        orbit_phase = (self.time_elapsed % self.orbit_period) / self.orbit_period

        # 위도 (궤도 경사각 51.6도)
        inclination = 51.6
        self.aocs.gps_latitude = inclination * math.sin(2 * math.pi * orbit_phase)

        # 경도 (지구 자전 고려)
        self.aocs.gps_longitude = (self.orbital_position % 360) - 180

        # 고도 (400~450km, 타원 궤도)
        mean_altitude = 425
        self.aocs.gps_altitude_km = mean_altitude + 25 * math.cos(2 * math.pi * orbit_phase)

        # 속도 (7.66 km/s, 고도에 반비례)
        self.aocs.gps_velocity_kmps = 7.66 + 0.1 * math.sin(2 * math.pi * orbit_phase)

        # 반올림
        self.aocs.gyro_x = round(self.aocs.gyro_x, 3)
        self.aocs.gyro_y = round(self.aocs.gyro_y, 3)
        self.aocs.gyro_z = round(self.aocs.gyro_z, 3)
        self.aocs.sun_sensor_angle = round(self.aocs.sun_sensor_angle, 2)
        self.aocs.magnetometer_x = round(self.aocs.magnetometer_x, 2)
        self.aocs.magnetometer_y = round(self.aocs.magnetometer_y, 2)
        self.aocs.magnetometer_z = round(self.aocs.magnetometer_z, 2)
        self.aocs.thruster_fuel_percent = round(self.aocs.thruster_fuel_percent, 2)
        self.aocs.gps_latitude = round(self.aocs.gps_latitude, 4)
        self.aocs.gps_longitude = round(self.aocs.gps_longitude, 4)
        self.aocs.gps_altitude_km = round(self.aocs.gps_altitude_km, 2)
        self.aocs.gps_velocity_kmps = round(self.aocs.gps_velocity_kmps, 3)

    def update_comm(self):
        """통신 시스템 업데이트"""
        # 신호 강도 (RSSI)
        # 지상국 가시권 여부 (위도가 특정 범위일 때)
        visible_to_ground = abs(self.aocs.gps_latitude) < 60

        if visible_to_ground:
            self.comm.rssi_dbm = random.uniform(-85, -70)  # 좋은 신호
            self.comm.rx_active = True

            # 10% 확률로 데이터 송신
            if random.random() < 0.1:
                self.comm.tx_active = True
                self.comm.data_backlog_mb = max(0, self.comm.data_backlog_mb - 5)
            else:
                self.comm.tx_active = False

            self.comm.last_contact_seconds_ago = 0
        else:
            self.comm.rssi_dbm = random.uniform(-120, -100)  # 약한 신호
            self.comm.rx_active = False
            self.comm.tx_active = False
            self.comm.last_contact_seconds_ago += 5

        # 데이터 백로그 누적 (탑재체 작동 시)
        if self.payload.camera_on:
            self.comm.data_backlog_mb += 2.5  # 이미지 1장 = 2.5MB

        self.comm.rssi_dbm = round(self.comm.rssi_dbm, 1)
        self.comm.data_backlog_mb = round(self.comm.data_backlog_mb, 2)

    def update_payload(self):
        """탑재체 업데이트"""
        # 탑재체 작동 조건: 배터리 충분 + 지구 가시권
        can_operate = (self.eps.battery_soc_percent > 40 and
                      not self.in_eclipse and
                      abs(self.aocs.gps_latitude) < 70)

        if can_operate and random.random() < 0.05:
            # 5% 확률로 촬영
            self.payload.camera_on = True
            self.payload.sensor_on = True
            self.mode = SatelliteMode.PAYLOAD_ACTIVE
            self.payload.images_captured_count += 1
            self.payload.last_image_time = datetime.now(timezone.utc).isoformat()
            print(f"  [{self.satellite_id}] Image captured! (Total: {self.payload.images_captured_count})")
        else:
            self.payload.camera_on = False
            self.payload.sensor_on = False
            if self.mode == SatelliteMode.PAYLOAD_ACTIVE:
                self.mode = SatelliteMode.NOMINAL

        self.payload.payload_temp = self.thermal.payload_temp
        self.payload.payload_power_watts = self.eps.payload_power_watts

    def generate_telemetry(self) -> Dict[str, Any]:
        """전체 텔레메트리 데이터 생성"""
        # Eclipse 상태 업데이트
        self.in_eclipse = self._is_in_eclipse()
        if self.in_eclipse and self.mode == SatelliteMode.NOMINAL:
            self.mode = SatelliteMode.ECLIPSE
        elif not self.in_eclipse and self.mode == SatelliteMode.ECLIPSE:
            self.mode = SatelliteMode.NOMINAL

        # 각 서브시스템 업데이트
        self.update_beacon_obc()
        self.update_eps()
        self.update_thermal()
        self.update_aocs()
        self.update_comm()
        self.update_payload()

        # 텔레메트리 패킷 생성
        telemetry = {
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'satellite_id': self.satellite_id,
            'beacon': asdict(self.beacon),
            'obc': asdict(self.obc),
            'eps': asdict(self.eps),
            'thermal': asdict(self.thermal),
            'aocs': asdict(self.aocs),
            'comm': asdict(self.comm),
            'payload': asdict(self.payload)
        }

        return telemetry

    def send_to_kafka(self, telemetry: Dict[str, Any]):
        """Kafka로 전송"""
        try:
            message = json.dumps(telemetry)
            self.producer.produce(
                self.kafka_topic,
                key=self.satellite_id.encode('utf-8'),
                value=message.encode('utf-8')
            )
            self.producer.poll(0)
        except Exception as e:
            print(f"[{self.satellite_id}] Kafka error: {e}")

    def update_orbital_state(self, time_step: float):
        """궤도 상태 업데이트"""
        self.time_elapsed += int(time_step)
        angular_velocity = 360 / self.orbit_period
        self.orbital_position = (self.orbital_position + angular_velocity * time_step) % 360


def run_multi_satellite_simulation(
    num_satellites: int = 10,
    kafka_servers: str = 'localhost:9092',
    interval: int = 5,
    duration: int = 5400  # 90분
):
    """
    다중 위성 시뮬레이션 실행

    Args:
        num_satellites: 위성 개수 (기본값: 10)
        kafka_servers: Kafka 브로커 주소
        interval: 전송 주기 (초, 기본값: 5)
        duration: 총 실행 시간 (초, 기본값: 5400 = 90분)
    """
    print("=" * 80)
    print("🛰️  인공위성 텔레메트리 시뮬레이터")
    print("=" * 80)
    print(f"위성 개수:     {num_satellites}")
    print(f"전송 주기:     {interval}초")
    print(f"실행 시간:     {duration}초 ({duration/60:.1f}분)")
    print(f"Kafka:        {kafka_servers}")
    print("=" * 80)
    print()

    # 위성 시뮬레이터 생성
    satellites: List[RealisticSatelliteSimulator] = []
    for i in range(num_satellites):
        sat_id = f"SAT-{i+1:03d}"
        simulator = RealisticSatelliteSimulator(sat_id, kafka_servers)
        # 각 위성의 궤도 위치를 분산
        simulator.orbital_position = (360 / num_satellites) * i
        # 배터리 초기 SoC를 랜덤화
        simulator.eps.battery_soc_percent = random.uniform(60, 95)
        satellites.append(simulator)

    print(f"\n✅ {num_satellites}개 위성 초기화 완료\n")

    # 시뮬레이션 실행
    iteration = 0
    start_time = time.time()

    try:
        while True:
            iteration += 1
            current_time = time.time()

            # 종료 조건
            if (current_time - start_time) >= duration:
                print(f"\n✅ 시뮬레이션 완료 ({duration}초)")
                break

            # 전체 위성 텔레메트리 생성 및 전송
            print(f"[{iteration:04d}] {datetime.now(timezone.utc).strftime('%H:%M:%S')} | "
                  f"Elapsed: {int(current_time - start_time)}s / {duration}s")

            for sat in satellites:
                telemetry = sat.generate_telemetry()
                sat.send_to_kafka(telemetry)
                sat.update_orbital_state(interval)

            # 다음 주기까지 대기
            time.sleep(interval)

    except KeyboardInterrupt:
        print("\n\n⚠️  시뮬레이터 중지 (Ctrl+C)")

    finally:
        # Kafka producer 정리
        print(f"\n📊 통계:")
        print(f"  총 반복:     {iteration}")
        print(f"  총 메시지:   {iteration * num_satellites}")
        print(f"  실행 시간:   {int(time.time() - start_time)}초")
        print("\nKafka producer flushing...")
        for sat in satellites:
            sat.producer.flush()
        print("✅ Shutdown complete")


def main():
    parser = argparse.ArgumentParser(
        description='인공위성 텔레메트리 시뮬레이터 (실제 위성 데이터 특성 모사)',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
예시:
  # 기본 실행 (10개 위성, 5초 주기, 90분)
  python satellite_simulator.py --kafka kafka:9092

  # 사용자 정의
  python satellite_simulator.py --kafka localhost:9092 --satellites 5 --interval 10 --duration 3600
        """
    )

    parser.add_argument(
        '--kafka',
        type=str,
        default='localhost:9092',
        help='Kafka 브로커 주소 (기본값: localhost:9092)'
    )

    parser.add_argument(
        '--satellites',
        type=int,
        default=10,
        help='위성 개수 (기본값: 10)'
    )

    parser.add_argument(
        '--interval',
        type=int,
        default=5,
        help='데이터 전송 주기 (초, 기본값: 5)'
    )

    parser.add_argument(
        '--duration',
        type=int,
        default=5400,
        help='시뮬레이션 실행 시간 (초, 기본값: 5400 = 90분)'
    )

    args = parser.parse_args()

    # 시뮬레이션 실행
    run_multi_satellite_simulation(
        num_satellites=args.satellites,
        kafka_servers=args.kafka,
        interval=args.interval,
        duration=args.duration
    )


if __name__ == '__main__':
    main()
